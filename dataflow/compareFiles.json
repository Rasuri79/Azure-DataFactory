{
	"name": "compareFiles",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "CsvFileA",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "CsvFileB",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "EqualRecordsCsv",
						"type": "DatasetReference"
					},
					"name": "EqualSink"
				},
				{
					"dataset": {
						"referenceName": "FileBRecords",
						"type": "DatasetReference"
					},
					"name": "FileBsink"
				},
				{
					"dataset": {
						"referenceName": "FileArecords",
						"type": "DatasetReference"
					},
					"name": "FileAsink"
				}
			],
			"transformations": [
				{
					"name": "FullJoin"
				},
				{
					"name": "FindMismatchRecords"
				},
				{
					"name": "FileBrecords"
				},
				{
					"name": "FileArecords"
				},
				{
					"name": "EqualRecord"
				},
				{
					"name": "selectB"
				},
				{
					"name": "selectA"
				}
			],
			"scriptLines": [
				"source(output(",
				"          transaction_id as string,",
				"          transactional_date as string,",
				"          product_id as string,",
				"          customer_id as string,",
				"          payment as string,",
				"          credit_card as string,",
				"          loyalty_card as string,",
				"          cost as string,",
				"          quantity as string,",
				"          price as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          transaction_id as string,",
				"          transactional_date as string,",
				"          product_id as string,",
				"          customer_id as string,",
				"          payment as string,",
				"          credit_card as string,",
				"          loyalty_card as string,",
				"          cost as string,",
				"          quantity as string,",
				"          price as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source2",
				"source1, source2 join(source1@transaction_id == source2@transaction_id,",
				"     joinType:'outer',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> FullJoin",
				"FullJoin derive(transaction_id = source1@transaction_id==source2@transaction_id,",
				"          transaction_id_fileA = source1@transaction_id,",
				"          transaction_id_fileB = source2@transaction_id) ~> FindMismatchRecords",
				"FindMismatchRecords filter(isNull(transaction_id_fileA) && !isNull(transaction_id_fileB)) ~> FileBrecords",
				"FindMismatchRecords filter(!isNull(transaction_id_fileA) && isNull(transaction_id_fileB)) ~> FileArecords",
				"FindMismatchRecords filter(!isNull(transaction_id_fileA) &&",
				"!isNull(transaction_id_fileB)",
				") ~> EqualRecord",
				"FileBrecords select(mapColumn(",
				"          transactional_date = source2@transactional_date,",
				"          product_id = source2@product_id,",
				"          customer_id = source2@customer_id,",
				"          payment = source2@payment,",
				"          credit_card = source2@credit_card,",
				"          loyalty_card = source2@loyalty_card,",
				"          cost = source2@cost,",
				"          quantity = source2@quantity,",
				"          price = source2@price,",
				"          transaction_id_fileB",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectB",
				"FileArecords select(mapColumn(",
				"          transactional_date = source1@transactional_date,",
				"          product_id = source1@product_id,",
				"          customer_id = source1@customer_id,",
				"          payment = source1@payment,",
				"          credit_card = source1@credit_card,",
				"          loyalty_card = source1@loyalty_card,",
				"          cost = source1@cost,",
				"          quantity = source1@quantity,",
				"          price = source1@price,",
				"          transaction_id_fileA",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectA",
				"EqualRecord sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['Equalrecords.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> EqualSink",
				"selectB sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['FileaB_only.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> FileBsink",
				"selectA sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['FileA_only.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> FileAsink"
			]
		}
	}
}